# -*- coding: utf-8 -*-
"""LVADSUSR74-Balachandar_G-Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1axWudALO6HCswLlw0i4ov5WQE-SQjUUt
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error,mean_absolute_percentage_error,mean_squared_error
from sklearn.metrics import r2_score

#Reading the CSV using Pandas
df = pd.read_csv("/content/drive/MyDrive/Datasets_file/Fare prediction.csv")
df.info()

#Checking for null values and filling them if any null values are found
df.isnull().sum()
#df.fillna(method = 'ffill',inplace = True)
#df.fillna(method = 'bfill',inplace = True)

#Checking for duplicates and droping them if they found
df.duplicated().sum()
#df.drop_duplicates()

#Checking for Outliers using Boxplot
plt.figure(figsize = (20,10))
sns.boxplot(data = df)
plt.title('Checking For Outliers')
plt.show()

#Removing outliers
df_55=pd.DataFrame(df)
iso = IsolationForest(contamination=0.05,random_state = 42)
x_f = df_55[['fare_amount','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']].values
outliers = iso.fit_predict(x_f)
outliers_indices = np.where(outliers == -1)[0]
dd = df_55.drop(outliers_indices)
dd.info()

#Visualisation After Removing the Outliers
plt.figure(figsize = (20,10))
sns.boxplot(data = dd)
plt.title('Checking For Outliers')
plt.show()

#Dropping Unwanted Columns
dd.drop("pickup_datetime",inplace = True,axis =1)
dd.drop("passenger_count",inplace = True,axis =1)
dd.drop("key",inplace = True,axis =1)
dd.info()

#Model Implementation
X = dd[["pickup_longitude","pickup_latitude","dropoff_longitude","dropoff_latitude"]]
y = dd["fare_amount"]

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state =42)
clf = LinearRegression()
clf.fit(X_train,y_train)
a_predict = clf.predict(X_test)
print("The Mean Absolute Error for the model:",mean_absolute_error(y_test,a_predict))
print("The R squared value for the model:",r2_score(y_test,a_predict))
print("The mean Squared Error for the model:",mean_squared_error(y_test,a_predict))




#The Linear Regression model gives the almost accurate results for the problem statement