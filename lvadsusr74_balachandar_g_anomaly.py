# -*- coding: utf-8 -*-
"""LVADSUSR74-Balachandar_G-Anomaly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uq6wZfPqwrkVYr5Za6iL5aGCS1F3vMyg
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings("ignore")

#Reading CSV file using Pandas
df = pd.read_csv("/content/drive/MyDrive/Datasets_file/anomaly_train.csv")
df.info()

#Checking for null values and filling them if any null values are found
df.isnull().sum()
#df.fillna(method = 'ffill',inplace = True)
#df.fillna(method = 'bfill',inplace = True)

#Checking for duplicates and droping them if they found
df.duplicated().sum()
#df.drop_duplicates()

#Checking for Outliers using Boxplot
plt.figure(figsize = (20,10))
sns.boxplot(data = df)
plt.title('Checking For Outliers')
plt.show()

#Removing Outliers from the data
df_55=pd.DataFrame(df)
iso = IsolationForest(contamination=0.05,random_state = 42)
x_f = df_55[['Amount','Time']].values
outliers = iso.fit_predict(x_f)
outliers_indices = np.where(outliers == -1)[0]
dd = df_55.drop(outliers_indices)
dd.info()

#Visualisation after removing outliers
plt.figure(figsize = (20,10))
sns.boxplot(data = dd)
plt.title('After Removing the outliers')
plt.show()

dd.drop("TransactionID",inplace =True,axis = 1)
dd.head()

#Converting the Categorical values to Numerical Values
label_encoder = LabelEncoder()
dd["Type"] = label_encoder.fit_transform(dd["Type"])
#dd[["Type","Location"]] = label_encoder.fit_transform(dd[["Type","Location"]])
df.info()

#Converting the Categorical values to Numerical Values
label_encoder = LabelEncoder()
dd["Location"] = label_encoder.fit_transform(dd["Location"])
#dd[["Type","Location"]] = label_encoder.fit_transform(dd[["Type","Location"]])
dd.info()

dd.head()

#selecting features for anamoly detection
features = dd[['Amount','User']]

# Create a new dataframe with the selected features
X = pd.DataFrame(features)
y = dd["Type"]
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 42)

model = IsolationForest()

model.fit(X)

# Predict the anomalies in the data
y_pred = model.predict(X_test)

# Add the predicted anomaly scores to the original dataframe
dd["anomaly_score"] = model.decision_function(X)

anomalies = dd.loc[dd["anomaly_score"] < 0]

# predict
x=dd[['Amount','Type']]
df_values=x.values

find=df_values

result=[]
for i in find:
  z=model.predict([i])
  if z==[1]:
    result.append('Not Anomaly')
  elif z==[-1]:
    result.append('Anomaly')

dd['Anomaly']=result
print(dd)

plt.scatter(dd["User"], dd["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["User"], anomalies["anomaly_score"], color="g", label="Anomaly")
plt.xlabel("Location")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()


#Insights
#The anamoly has been detected based on the amount and the user,
#the furthur more investigation can be done on that location by collecting their specific records
#from the bank for cross verifying the things that their are anamoly or not