# -*- coding: utf-8 -*-
"""LVADSUSR74-Balachandar_G-Clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-FAaOyo86CVfoYhl8yzsrbwt4IQMTn8l
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.ensemble import IsolationForest
from sklearn.metrics import roc_curve,auc
from sklearn.metrics import silhouette_score

#Reading csv using pandas
df = pd.read_csv("/content/drive/MyDrive/Datasets_file/customer_segmentation.csv")
df.info()

#Checking for null values and filling them if any null values are found
df.isnull().sum()
df.fillna(method = 'ffill',inplace = True)
df.fillna(method = 'bfill',inplace = True)

#Checking for duplicates and droping them if they found
df.duplicated().sum()
#df.drop_duplicates()

#Checking for Outliers using Boxplot
plt.figure(figsize = (30,10))
sns.boxplot(data = df)
plt.title('Checking For Outliers')
plt.show()

#Removing Outliers from the data
df_55=pd.DataFrame(df)
iso = IsolationForest(contamination=0.05,random_state = 42)
x_f = df_55[['Income']].values
outliers = iso.fit_predict(x_f)
outliers_indices = np.where(outliers == -1)[0]
dd = df_55.drop(outliers_indices)
dd.info()

#Visualisation after removing outliers
plt.figure(figsize = (30,10))
sns.boxplot(data = dd)
plt.title('After Removing the outliers')
plt.show()

#Dropping the unwanted columns
dd.drop("Year_Birth",inplace =True,axis =1)
dd.drop("Education",inplace =True,axis =1)
dd.drop("Marital_Status",inplace =True,axis =1)
dd.drop("Teenhome",inplace =True,axis =1)
dd.drop("Dt_Customer",inplace =True,axis =1)
dd.drop("Recency",inplace =True,axis =1)
dd.drop("MntWines",inplace =True,axis =1)
dd.drop("MntFruits",inplace =True,axis =1)
dd.drop("MntMeatProducts",inplace =True,axis =1)
dd.drop("MntFishProducts",inplace =True,axis =1)
dd.drop("MntSweetProducts",inplace =True,axis =1)
dd.drop("MntGoldProds",inplace =True,axis =1)
dd.drop("AcceptedCmp3",inplace =True,axis =1)
dd.drop("AcceptedCmp4",inplace =True,axis =1)
dd.drop("AcceptedCmp5",inplace =True,axis =1)
dd.drop("AcceptedCmp1",inplace =True,axis =1)
dd.drop("AcceptedCmp2",inplace =True,axis =1)
dd.drop("Z_CostContact",inplace =True,axis =1)
dd.info()

dd.head()

#Model Implementation

X = dd[['Income','NumWebVisitsMonth','Response']]
scaler = MinMaxScaler()
X_scaled=scaler.fit_transform(X)
X_scaled

cluster_list=[1,2,3,4,5]
sse_lst=[]

for i in cluster_list:
  kmeans=KMeans(n_clusters=i)
  kmeans.fit(X_scaled)
  sse=kmeans.inertia_
  sse_lst.append(sse)

sns.lineplot(x=cluster_list, y=sse_lst)
plt.show()

kmeans_best_fit=KMeans(n_clusters=3)
kmeans_best_fit.fit(X_scaled)
clusters=kmeans_best_fit.predict(X_scaled)
dd['cluster']=clusters
#print(dd)

#visualising the cluster
cluster_centers=kmeans_best_fit.cluster_centers_
sns.scatterplot(data=dd,x='Income',y='NumWebVisitsMonth',hue='cluster')
plt.show()

#Metrics Evaluation
cluster_labels = kmeans.labels_
sil_score = silhouette_score(X, cluster_labels)
print("The silhouette_score for the KMeans Clustering:",sil_score)


#INSIGHTS
#The cluster are made based on the income,purchasing behaviour as well on the Number of visits.
#The Customer with high income visits the shop in a moderate manner
#The customer with low and moderate income are visiting the shop more frequently the discounts on the product
#and the cash back offer can be provided in order to improve the business
#The customer with high income who visits the shop we can provide some discounts on their purchase so that will attract the high income customers